from __future__ import annotations

import argparse
from typing import Sequence

EOLS = {'crlf': b'\r\n', 'lf': b'\n'}

# That was my version of the method
# def check_line_expected_eol(filename: str, expected_eol: str) -> int:
#     ret_val = 0
#     with open(filename, 'rb') as file_obj:
#         ltf=[]
#         for idx, line in enumerate(file_obj):
#             if EOLS[expected_eol] == b'\r\n' and line.endswith(EOLS[expected_eol]):
#                 continue
#             elif EOLS[expected_eol] == b'\n' and line.endswith(b'\r\n'):
#                 ret_val = 1
#                 ltf.append(str(idx))
#             elif EOLS[expected_eol] == b'\n' and line.endswith(EOLS[expected_eol]):
#                 continue
#             else:
#                 ret_val = 1
#                 ltf.append(str(idx))
#         file_obj.close()
#         return ret_val,ltf

# And that's how copilot (after few attempts) simplified it!
def check_line_expected_eol(filename: str, expected_eol: str) -> int:
    ret_val = 0
    ltf = []
    with open(filename, 'rb') as file_obj:
        for idx, line in enumerate(file_obj):
            expected = EOLS[expected_eol]
            if expected == b'\n' and line.endswith(b'\r\n'):
                # LF is expected but the line ends with CRLF
                ret_val = 1
                ltf.append(str(idx))
            elif not line.endswith(expected):
                # The line does not end with the expected line ending
                ret_val = 1
                ltf.append(str(idx))
    return ret_val, ltf


def main(argv: Sequence[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('filenames', nargs='*', help='Filenames to fix')
    parser.add_argument(
        '-e', '--eol',
        choices=('crlf', 'lf'),
        default='lf',
        help='Specifies the line ending to expect in files. Default is LF.',
    )
    args = parser.parse_args(argv)
    retv, issues = 0, 0
    for filename in args.filenames:
        retv, ltf = check_line_expected_eol(filename, args.eol)
        if retv:
            lines_to_print = ltf if len(ltf) <= 5 else ltf[:5]
            extra_lines_msg = '' if len(ltf) <= 5 else f' and {len(ltf) - 5} more lines.'
            print(f'{filename}: Incorrect line endings. Please investigate lines: {",".join(lines_to_print)}{extra_lines_msg}')
            issues = 1
    return issues

if __name__ == '__main__':
    raise SystemExit(main())


